#!/usr/bin/env ruby

USAGE = <<EOS
Usage: #{File.basename(Process.argv0)} version
EOS

version = ARGV.shift
if !version
  $stderr.puts(USAGE)
  exit(1)
end

require "time"

require "pandoc_binary"

def run(*args, **kwargs)
  puts("run command: args=#{args.inspect} kwargs=#{kwargs.inspect}")
  system(*args, **{exception: true}.merge) if ENV["PANDOC_BINARY_DRYRUN"].to_s.empty?
end

Dir.chdir(PandocBinary::TOP_PATH)

release = PandocBinary::Release.fetch_by_version(version)
d = release.published_at_time.to_date.next_day
commit_time = Time.new(d.year, d.month, d.day,
                       23, rand(0 .. 59), rand(0 .. 59), in: "+09:00").utc
run(*%w[git cococo ./bin/update_pandoc_binary], release.tag_name)
run("faketime", commit_time.iso8601,
    *%w[git commit --amend -C HEAD --reset-author])
run("./bin/test", release.tag_name)
